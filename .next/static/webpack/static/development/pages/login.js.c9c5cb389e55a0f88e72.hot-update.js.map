{"version":3,"file":"static/webpack/static/development/pages/login.js.c9c5cb389e55a0f88e72.hot-update.js","sources":["webpack:///./src/LoginForm/index.js"],"sourcesContent":["import React from 'react';\nimport { Button, FormGroup, Label, Input, FormText } from 'reactstrap';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\n\nexport default class Example extends React.Component {\n  render() {\n    return (\n      <>\n        <h2>Login</h2>\n\n        <Formik\n          initialValues={{ email: '', password: '' }}\n          validate={values => {\n            let errors = {};\n            if (!values.email) {\n              errors.email = 'Required';\n            } else if (\n              !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\n            ) {\n              errors.email = 'Invalid email address';\n            }\n            return errors;\n          }}\n          onSubmit={(values, { setSubmitting }) => {\n            setTimeout(() => {\n              alert(JSON.stringify(values, null, 2));\n              setSubmitting(false);\n            }, 400);\n          }}\n        >\n          {({ isSubmitting }) => (\n\n            <Form>\n              <FormGroup>\n                <Label for=\"exampleEmail\">Email</Label>\n                <Field type=\"email\" name=\"email\" />\n                <Input type=\"email\" name=\"email\" id=\"exampleEmail\" placeholder=\"with a placeholder\" />\n              </FormGroup>\n              <FormGroup>\n                <Label for=\"examplePassword\">Password</Label>\n                <Input type=\"password\" name=\"password\" id=\"examplePassword\" placeholder=\"password placeholder\" />\n              </FormGroup>\n              <Button>Submit</Button>\n            </Form>\n          )}\n        </Formik>\n      </>\n    );\n  }\n}\n\n// import React from 'react';\n// import { Formik, Field, ErrorMessage, Form as FForm } from 'formik';\n// import { Button, Form, FormGroup, Label, Input, FormText } from 'reactstrap';\n\n// const Basic = () => (\n//   <div>\n//     <h1>Any place in your app!</h1>\n//     <Formik\n//       initialValues={{ email: '', password: '' }}\n//       validate={values => {\n//         let errors = {};\n//         if (!values.email) {\n//           errors.email = 'Required';\n//         } else if (\n//           !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\n//         ) {\n//           errors.email = 'Invalid email address';\n//         }\n//         if (!values.password) {\n//           errors.password = 'Required';\n//         }\n//         return errors;\n//       }}\n//       onSubmit={(values, { setSubmitting }) => {\n//         setTimeout(() => {\n//           alert(JSON.stringify(values, null, 2));\n//           setSubmitting(false);\n//         }, 400);\n//       }}\n//     >\n//       {({ isSubmitting }) => (\n//         <FForm>\n//           <FormGroup>\n//             <Label for=\"email\">Email</Label>\n//             <Field type=\"email\" name=\"email\" id=\"email\" placeholder=\"email\" />\n//             <ErrorMessage name=\"email\" component=\"div\" />\n//           </FormGroup>\n//           <FormGroup>\n//             <Label for=\"email\">Password</Label>\n//             <Field type=\"password\" name=\"password\" id=\"password\" placeholder=\"password\" />\n//             <ErrorMessage name=\"password\" component=\"div\" />\n//           </FormGroup>\n//           <button type=\"submit\" disabled={isSubmitting}>\n//             Submit\n//           </button>\n//         </FForm>\n//       )}\n//     </Formik>\n//   </div>\n// );\n\n// export default Basic;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAGA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAlBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAoBA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAZA;AAkBA;;;;AA5CA;AAgDA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;A","sourceRoot":""}